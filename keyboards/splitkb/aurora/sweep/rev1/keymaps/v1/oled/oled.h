#pragma once

#include "teacher/chord_teacher.h"

#define frame_size 1024

void my_display_layer(void);
void render_mods_status(void);

// CLOCK
void render_clock(uint8_t shift, uint8_t line);
uint32_t clock_callback(uint32_t trigger_time, void* cb_arg);
bool process_clock(uint16_t keycode, keyrecord_t* record);

// WPM
void render_wpm(void);

// PET
void render_luna(int LUNA_X, int LUNA_Y);
void process_pet_status(uint16_t keycode, keyrecord_t *record);

// Glitch
void arasaka_draw(void);

    //    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,192,224,224,240,240,248,248,248,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,248,248,248,240,240,224,224,192,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,224,224,224,192,  0,  0,  0,  0, 96,240,240, 96,  0,  0,  0,  0,  0,  0,240,240,240,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    //    0,  0,  0,  0,  0,  0,  0,128,192,224,240,248,252,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 15,  7,  7,  7, 15,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,248,240,224,192,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,240,254,255,127,115,127,127,255,252,224,  0,255,255,255,254, 48,254,254,255,199,135,255,255,255,  0,224,247,255,191,191,255,255,254,  0,254,255,255,255,  7,255,255,254,240,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    //    0,  0,  0,  0,192,248,254,255,255,255,255,255,255,255,255,255,127, 31, 15,  7,  3,  1,192,224,240,251,255,255,255,255,255,  0,  0,  0,  0,  0,255,255,255,255,255,255,241,225,192,  1,  3,  7, 15, 31,127,255,255,255,255,255,255,255,255,255,254,248,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  3,128,128,128,128,  0,  1,  3,  3,  1,  1,  3,  3,  1,  0,  0,  1,  1,  3,  3,  3,  3,129,192,128,  1,  3,  3,  3,  3,  1,  1,  0,129,195,195,193,  0,  1,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    //    0,  0,  0,  0,255,255,255,255,255,255,255,255,255,255,255,  7,  0,  0,  0,240,252,255,255,255,255,255,255,255,255,255,255,255,254,252,254,255,255,255,255,255,255,255,255,255,255,255,252,240,  0,  0,  0,  7,255,255,255,255,255,255,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 63, 63,127,123,243,247,231,193,  0,252,252,252, 28, 60,252,252,252, 28,252,252,248,224,  0,255,255,255,  0,255,255,255,255, 28, 28,  0,255,255,255,255, 28,252,252,248,240,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    //    0,  0,  0,  0,255,255,255,255,255,255,255,255,255,255,255,240,  0,  0,  0,  7, 31,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127, 31,  7,  0,  0,  0,240,255,255,255,255,255,255,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  7, 15, 15, 14, 15,  7,  7,  3,  0, 15, 15, 15,  0,  0, 15, 15, 15,  0,  7, 15, 15,  7,  0, 15, 15, 15,  0,  1,  7,  7, 15, 14, 14,  6,  7,  7,  7,  7,  0,  7,  7,  7,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    //    0,  0,  0,  0,  1, 15, 63,255,255,255,255,255,255,255,255,255,255,254,248,240,224,192,128,129,  3,  7, 15, 15, 31, 31, 31, 63, 63, 63, 63, 63, 31, 31, 31, 15, 15,  7,  3,129,128,192,224,240,248,254,255,255,255,255,255,255,255,255,255,255, 63, 15,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,192,224,224,224,252,254,254,  0,  0,128,192,224,224,224,224,192,128, 96,224,224,224,  0,  0,224,224,224,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    //    0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  7, 15, 31, 63,127,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,252,252,252,252,252,252,252,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,127, 63, 31, 15,  7,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 56,120,120, 48, 31, 63, 63,120,112,127,127, 63,  0,  6, 31, 63, 63,127,119,119, 63, 55,  0,  3, 15, 63,127,127, 63, 15,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    //    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  3,  7,  7, 15, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15,  7,  7,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,

void render_mod_status_ctrl_shift(uint8_t modifiers);
void render_mod_status_gui_alt(uint8_t modifiers);
void render_space(void);

typedef struct {
    teacher_chord_mode_e teacher_mode;
    char*                chord_buffer;
} oled_state_s;

void update_oled_state(void);
oled_state_s get_oled_state(void);
void user_sync_state_handler(uint8_t in_buflen, const void* in_data, uint8_t out_buflen, void* out_data);
